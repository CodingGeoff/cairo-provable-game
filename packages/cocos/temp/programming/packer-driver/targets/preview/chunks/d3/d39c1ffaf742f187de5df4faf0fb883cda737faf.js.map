{"version":3,"sources":["file:///Users/ruoyan/Desktop/WorkSpace/cairo-provable-game/packages/cocos/assets/script/game/fight/BasicMetaState.ts"],"names":["BasicMetaState","id","name","introduce","getMetaInstance","instance","OnCreateState","self","GetOnFightBegan","fightMap","GetOnRoundBegan","roundState","GetOnRoundEnd","GetOnBeHurt","onBeTarget","GetOnBeCure","GetOnBuff","GetBeforeAction","actionState","GetAfterAction","GetOnAttack","GetOnSkill","GetOnDead","GetonReBirth"],"mappings":";;;8BAOaA,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADb;gCACaA,c,GAAN,MAAMA,cAAN,CAAqB;AAAA;AASxB;AATwB,eAUxBC,EAVwB;AAWxB;AAXwB,eAYxBC,IAZwB;AAaxB;AAbwB,eAcxBC,SAdwB;AAAA;;AAExB;AACsB,eAAfC,eAAe,CAACH,EAAD,EAAa;AAC/B,cAAMI,QAAQ,GAAG,IAAI,IAAJ,EAAjB;AACAA,UAAAA,QAAQ,CAACJ,EAAT,GAAcA,EAAd;AACA,iBAAOI,QAAP;AACH;;AASD;AACJ;AACA;AACA;AACIC,QAAAA,aAAa,CAACC,IAAD,EAAwB,CAAE;AAEvC;AACJ;AACA;AACA;AACA;;;AACIC,QAAAA,eAAe,GAAkE;AAC7E,gDAAO,WAAOD,IAAP,EAA+BE,QAA/B,EAAsD,CAAE,CAA/D;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,QAAAA,eAAe,GAA2F;AACtG,gDAAO,WAAOH,IAAP,EAA+BI,UAA/B,EAAwDF,QAAxD,EAA+E,CAAE,CAAxF;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIG,QAAAA,aAAa,GAA2F;AACpG,gDAAO,WAAOL,IAAP,EAA+BI,UAA/B,EAAwDF,QAAxD,EAA+E,CAAE,CAAxF;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACII,QAAAA,WAAW,GAA2F;AAClG,gDAAO,WAAON,IAAP,EAA+BO,UAA/B,EAAwDL,QAAxD,EAA+E,CAAE,CAAxF;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIM,QAAAA,WAAW,GAA2F;AAClG,gDAAO,WAAOR,IAAP,EAA+BO,UAA/B,EAAwDL,QAAxD,EAA+E,CAAE,CAAxF;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIO,QAAAA,SAAS,GAA2F;AAChG,gDAAO,WAAOT,IAAP,EAA+BO,UAA/B,EAAwDL,QAAxD,EAA+E,CAAE,CAAxF;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,QAAAA,eAAe,GAA4F;AACvG,gDAAO,WAAOV,IAAP,EAA+BW,WAA/B,EAA0DT,QAA1D,EAAiF,CAAE,CAA1F;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIU,QAAAA,cAAc,GAAiE;AAC3E,gDAAO,WAAOZ,IAAP,EAA+BE,QAA/B,EAAsD,CAAE,CAA/D;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIW,QAAAA,WAAW,GAA4F;AACnG,gDAAO,WAAOb,IAAP,EAA+BW,WAA/B,EAA0DT,QAA1D,EAAiF,CAAE,CAA1F;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIY,QAAAA,UAAU,GAA4F;AAClG,gDAAO,WAAOd,IAAP,EAA+BW,WAA/B,EAA0DT,QAA1D,EAAiF,CAAE,CAA1F;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIa,QAAAA,SAAS,GAAiE;AACtE,gDAAO,WAAOf,IAAP,EAA+BE,QAA/B,EAAsD,CAAE,CAA/D;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIc,QAAAA,YAAY,GAAiE;AACzE,gDAAO,WAAOhB,IAAP,EAA+BE,QAA/B,EAAsD,CAAE,CAA/D;AACH;;AAvIuB,O","sourcesContent":["import { FightMap,  } from \"../../scenes/Fight/Canvas/FightMap\"\nimport { ActionState } from \"./ActionState\"\nimport { BasicState } from \"./BasicState\"\nimport { OnBeTarget } from \"./OnBeTarget\"\nimport { RoundState } from \"./RoundState\"\n\n// 状态元基类\nexport class BasicMetaState {\n    \n    // 创建基类对象\n    static getMetaInstance(id: string) {\n        const instance = new this()\n        instance.id = id\n        return instance\n    }\n\n    // id\n    id: string\n    // 名称\n    name: string\n    // 简介\n    introduce: string\n\n    /** \n     * 创建时的函数 该函数在创建本状态对象时调用\n     * self 当前状态对象\n     */\n    OnCreateState(self: BasicState<any>) {}\n\n    /** \n     * 获取战斗开始函数 该函数由FigtMap组件调用\n     * self 当前状态对象\n     * fightMap 战斗场景对象\n     */\n    GetOnFightBegan(): (self: BasicState<any> , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 获取回合开始函数 该函数由FigtMap组件调用\n     * self 当前状态对象\n     * roundState 回合状态函数\n     * fightMap 战斗场景对象\n     */\n    GetOnRoundBegan(): (self: BasicState<any> , roundState: RoundState , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , roundState: RoundState , fightMap: FightMap) => {}\n    }\n\n    /**\n     * 获取回合结束函数 该函数由FightMap组件调用\n     * self 当前状态对象\n     * roundState 回合状态函数\n     * fightMap 战斗场景对象\n     */\n    GetOnRoundEnd(): (self: BasicState<any> , roundState: RoundState , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , roundState: RoundState , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 获取被伤害时的函数\n     * self 当前状态对象\n     * onBeTarget 结算事件对象\n     * fightMap 战斗场景对象\n     */\n    GetOnBeHurt(): (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 获取被治疗时的函数\n     * self 当前状态对象\n     * onBeTarget 结算事件对象\n     * fightMap 战斗场景对象\n     */\n    GetOnBeCure(): (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 获取被添加buff时的函数\n     * self 当前状态对象\n     * onBeTarget 结算事件对象\n     * fightMap 战斗场景对象\n     */\n    GetOnBuff(): (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => Promise<void> {\n        return async (self: BasicState<any> , onBeTarget: OnBeTarget , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 行动之前的函数\n     * self 当前状态对象\n     * actionState 行动对象\n     * fightMap 战斗场景对象\n     */\n    GetBeforeAction(): (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 行动之后的函数\n     * self 当前状态对象\n     * actionState 行动对象\n     * fightMap 战斗场景对象\n     */\n    GetAfterAction(): (self: BasicState<any> , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 普通攻击的函数\n     * self 当前状态对象\n     * fightMap 战斗场景对象\n     */\n    GetOnAttack(): (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 技能攻击的函数\n     * self 当前状态对象\n     * fightMap 战斗场景对象\n     */\n    GetOnSkill(): (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , actionState: ActionState , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 死亡时的函数\n     * self 当前状态对象\n     * fightMap 战斗场景对象\n     */\n    GetOnDead(): (self: BasicState<any> , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , fightMap: FightMap) => {}\n    }\n\n    /** \n     * 获取重生时的函数\n     * self 当前状态对象\n     * fightMap 战斗场景对象\n     */\n    GetonReBirth(): (self: BasicState<any> , fightMap: FightMap) => Promise<any> {\n        return async (self: BasicState<any> , fightMap: FightMap) => {}\n    }\n}"]}