{"version":3,"sources":["file:///Users/ruoyan/Desktop/WorkSpace/cairo-provable-game/packages/cocos/assets/script/util/resource/getNodePool.ts"],"names":["PrefabNodePool","getNodePool","prefab","nodePool","cach","get","set","NodePool","instantiate","size","$nodePool","constructor","p","$prefab","i","put","node","Map"],"mappings":";;;8EAEMA,c;;AAgCN;AACO,WAASC,WAAT,CAAqBC,MAArB,EAAqD;AACxD,QAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASH,MAAT,CAAf;AACA,QAAIC,QAAJ,EAAc,OAAOA,QAAP;AACdA,IAAAA,QAAQ,GAAG,IAAIH,cAAJ,CAAmBE,MAAnB,CAAX;AACAE,IAAAA,IAAI,CAACE,GAAL,CAASJ,MAAT,EAAkBC,QAAlB;AACA,WAAOA,QAAP;AACH;;yBANeF,W;;;;;;AAnCDM,MAAAA,Q,OAAAA,Q;AAAkBC,MAAAA,W,OAAAA,W;;;;;;;AAE3BR,MAAAA,c,GAAN,MAAMA,cAAN,CAAqB;AAOjB;AACe,YAAJS,IAAI,GAAG;AAAE,iBAAO,KAAKC,SAAL,CAAeD,IAAtB;AAA4B,SAR/B,CAUjB;;;AACAE,QAAAA,WAAW,CAACC,CAAD,EAAY;AAVvB;AAUuB,eATfC,OASe;AAPvB;AAOuB,eANfH,SAMe;AACnB,eAAKG,OAAL,GAAeD,CAAf;AACA,eAAKF,SAAL,GAAiB,IAAIH,QAAJ,EAAjB;;AACA,eAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B,MAAK,KAAKJ,SAAL,CAAeK,GAAf,CAAmBP,WAAW,CAACI,CAAD,CAA9B,CAAL;AAC/B,SAfgB,CAiBjB;;;AACOP,QAAAA,GAAG,GAAS;AACf,cAAI,KAAKK,SAAL,CAAeD,IAAf,MAAyB,CAA7B,EAAgC,OAAOD,WAAW,CAAC,KAAKK,OAAN,CAAlB;AAChC,iBAAO,KAAKH,SAAL,CAAeL,GAAf,EAAP;AACH,SArBgB,CAuBjB;;;AACOU,QAAAA,GAAG,CAACC,IAAD,EAAa;AACnB,iBAAO,KAAKN,SAAL,CAAeK,GAAf,CAAmBC,IAAnB,CAAP;AACH;;AA1BgB,O,EA6BrB;;AACMZ,MAAAA,I,GAAO,IAAIa,GAAJ,E","sourcesContent":["import { Node, NodePool, Prefab, instantiate } from \"cc\";\n\nclass PrefabNodePool {\n    // 节点预制体\n    private $prefab: Prefab\n\n    // 节点池\n    private $nodePool: NodePool\n\n    // 获取节点数量\n    public get size() { return this.$nodePool.size }\n\n    // 节点池构造器\n    constructor(p: Prefab) {\n        this.$prefab = p\n        this.$nodePool = new NodePool\n        for (let i = 0; i < 5; i++) this,this.$nodePool.put(instantiate(p))\n    }\n\n    // 获取节点\n    public get(): Node {\n        if (this.$nodePool.size() <= 0) return instantiate(this.$prefab)\n        return this.$nodePool.get()\n    }\n\n    // 返回节点\n    public put(node: Node) {\n        return this.$nodePool.put(node)\n    }\n}\n\n// 缓存\nconst cach = new Map<Prefab , PrefabNodePool>()\n\n// 获取一个节点池\nexport function getNodePool(prefab: Prefab): PrefabNodePool {\n    let nodePool = cach.get(prefab)\n    if (nodePool) return nodePool\n    nodePool = new PrefabNodePool(prefab)\n    cach.set(prefab , nodePool)\n    return nodePool\n}"]}