{"version":3,"sources":["file:///Users/ruoyan/Desktop/WorkSpace/LegendOfWarcraftHeroes/assets/script/game/fight_entity/character/sunwukong.ts"],"names":["GetCharacterCoordinatePosition","util","RegisterCharacter","CharacterMetaState","Character","id","name","AnimationDir","AnimationType","AvatarPath","CharacterCamp","CharacterQuality","AnimationScale","HpGrowth","AttackGrowth","DefenceGrowth","PierceGrowth","SpeedGrowth","Energy","PassiveIntroduceOne","replace","PassiveIntroduceTwo","SkillIntroduce","OnCreateState","self","star","speed","attack","pierce","maxHp","GetOnAttack","actionState","fightMap","selfComponent","component","enemys","getEnimies","allLiveCharacter","sort","a","b","coordinate","col","enemy","targets","push","state","isPlayAnimation","sundry","moveNodeToPosition","node","moveCurve","targetPosition","direction","row","moveTimeScale","holAnimation","timeScale","playAnimation","defaultState","target","GetOnSkill","forEach","e","i"],"mappings":"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","sourcesContent":["import { math } from \"cc\";\nimport { GetCharacterCoordinatePosition, HolCharacter } from \"../../../prefab/HolCharacter\";\nimport { FightMap } from \"../../../scenes/Fight/Canvas/FightMap\";\nimport { util } from \"../../../util/util\";\nimport { ActionState } from \"../../fight/ActionState\";\nimport { BasicState } from \"../../fight/BasicState\";\nimport { BuffState } from \"../../fight/buff/BuffState\";\nimport { RegisterCharacter } from \"../../fight/character/CharacterEnum\";\nimport { CharacterMetaState } from \"../../fight/character/CharacterMetaState\";\nimport { CharacterState } from \"../../fight/character/CharacterState\";\n\n@RegisterCharacter({id: \"sunwukong\"})\nclass Character extends CharacterMetaState {\n\n    name: string = \"孙悟空\"\n\n    AnimationDir: string = \"game/fight_entity/character/sunwukong\"\n\n    AnimationType: \"DrangonBones\" | \"Spine\" = \"Spine\"\n\n    AvatarPath: string = \"game/fight_entity/character/sunwukong/avatar/spriteFrame\"\n\n    CharacterCamp: \"ordinary\" | \"nature\" | \"abyss\" | \"dark\" | \"machine\"|\"sacred\" = \"sacred\"\n\n    CharacterQuality: number = 5\n\n    AnimationScale: number = 0.7\n\n    HpGrowth: number = 70\n\n    AttackGrowth: number = 25\n\n    DefenceGrowth: number = 20\n\n    PierceGrowth: number = 10\n\n    SpeedGrowth: number = 15\n\n    Energy: number = 100\n\n    PassiveIntroduceOne: string = `\n    \n    额外获得 20% 速度\n    额外获得 20% 攻击力\n    额外获得 20% 护甲穿透\n    `.replace(/ /ig , \"\")\n\n    PassiveIntroduceTwo: string = `\n    \n    额外获得 20% 生命值\n    额外获得 20% 攻击力\n    每次攻击后有 20% 概率再次出手\n    `.replace(/ /ig , \"\")\n\n    SkillIntroduce: string = `\n    \n    对一排敌人造成150%攻击力的伤害\n    并且眩晕敌人2回合\n    `.replace(/ /ig , \"\")\n\n    OnCreateState(self: CharacterState): void {\n        if (self.star >= 2) {\n            self.speed *= 1.2\n            self.attack *= 1.2\n            self.pierce *= 1.2\n        }\n        if (self.star >= 4) {\n            self.maxHp *= 1.2\n            self.attack *= 1.2\n        }\n    }\n\n    GetOnAttack(): (self: CharacterState, actionState: ActionState, fightMap: FightMap) => Promise<any> {\n        return async (self: CharacterState, actionState: ActionState, fightMap: FightMap) => {\n            const selfComponent = self.component\n            // 获取敌人\n            const enemys = selfComponent.getEnimies(fightMap.allLiveCharacter)\n                .sort((a , b) => a.coordinate.col - b.coordinate.col)\n            const enemy = enemys[0]\n            if (!enemy) return\n            actionState.targets.push(enemy.state)\n            // 播放动画\n            if (fightMap.isPlayAnimation) {\n                // 移动过去\n                await util.sundry.moveNodeToPosition(selfComponent.node , {\n                    moveCurve: true ,\n                    targetPosition: GetCharacterCoordinatePosition(\n                        enemy.direction , \n                        enemy.coordinate.row ,\n                        enemy.coordinate.col ,\n                        \"attack\"\n                    ) ,\n                    moveTimeScale: self.component.holAnimation.timeScale\n                })\n                await selfComponent.holAnimation.playAnimation(\"attack\" , 1 , selfComponent.defaultState)\n            }\n            // 造成伤害\n            for (const target of actionState.targets)\n                await selfComponent.attack(self.attack * 1.0 , target.component)\n            // 回到原位\n            if (fightMap.isPlayAnimation) {\n                await util.sundry.moveNodeToPosition(selfComponent.node , {\n                    moveCurve: true ,\n                    targetPosition: GetCharacterCoordinatePosition(\n                        selfComponent.direction , \n                        selfComponent.coordinate.row ,\n                        selfComponent.coordinate.col ,\n                    ) ,\n                    moveTimeScale: self.component.holAnimation.timeScale\n                })\n            }\n            // 再次出手 20% 概率\n            // if ( self.star >= 4 && Math.random() < 0.2 ) {\n            //     if (fightMap.isPlayAnimation) await self.component.showString(\"再次出手\")\n            //     await self.component.action()\n            // }\n            return\n        }\n    }\n\n    GetOnSkill(): (self: CharacterState, actionState: ActionState, fightMap: FightMap) => Promise<any> {\n        return async (self: CharacterState, actionState: ActionState, fightMap: FightMap) => {\n            const selfComponent = self.component\n            // 获取敌人\n            const enemys = selfComponent.getEnimies(fightMap.allLiveCharacter)\n                .sort((a , b) => a.coordinate.col - b.coordinate.col)\n            const enemy = enemys[0]\n            if (!enemy) return\n            actionState.targets.push(enemy.state)\n            enemys.forEach((e , i) => {\n                if (i === 0) return\n                if (e.coordinate.row === enemy.coordinate.row)\n                    actionState.targets.push(e.state)\n            })\n            // 播放动画\n            if (fightMap.isPlayAnimation) {\n                // 移动过去\n                await util.sundry.moveNodeToPosition(selfComponent.node , {\n                    moveCurve: true ,\n                    targetPosition: GetCharacterCoordinatePosition(\n                        enemy.direction , \n                        enemy.coordinate.row ,\n                        enemy.coordinate.col ,\n                        \"attack\"\n                    ) ,\n                    moveTimeScale: self.component.holAnimation.timeScale\n                })\n                await selfComponent.holAnimation.playAnimation(\"skill\" , 1)\n                selfComponent.holAnimation.playAnimation(selfComponent.defaultState)\n            }\n            // 造成伤害 ...\n            // for (const target of actionState.targets) {\n            //     // 添加眩晕状态\n            //     const vertigo = new BuffState({id: \"vertigo\"})\n            //     target.component.addBuff(selfComponent , vertigo)\n            //     // 两回合后去掉\n            //     fightMap.listenRoundEvent(2 , () => target.component.deleteBuff(vertigo) )\n            //     // 攻击\n            //     fightMap.actionAwaitQueue.push(\n            //         selfComponent.attack(self.attack * 1.5 , target.component)\n            //     )\n            // }\n            // 回到原位\n            if (fightMap.isPlayAnimation) \n                await util.sundry.moveNodeToPosition(selfComponent.node , {\n                    moveCurve: true ,\n                    targetPosition: GetCharacterCoordinatePosition(\n                        selfComponent.direction , \n                        selfComponent.coordinate.row ,\n                        selfComponent.coordinate.col ,\n                    ) ,\n                    moveTimeScale: self.component.holAnimation.timeScale\n                })\n            return\n        }\n    }\n}"]}